?TreeSim
?sim.bd.age
sim.bd.age(age=10, numbsim=1, lambda=0.2, mu=0)
sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)
```
You can also embed plots, for example:
sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)
plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)
plot(simTree1)
simTree1
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
plot(simTree1)
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
plot(simTree2)
LTT.plot(simTree1)
?LTT.plot
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)
plot(simTree1[[1]])
plot(simTree2[[2]])
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)
plot(simTree2[[1]])
LTT.plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
plot(simTree1)
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
plot(simTree2)
plot.ltt(simTree1)
ltt.plot(simTree1)
ltt.plot(simTree1, log="y")
ltt.plot(simTree2, log="y")
st<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
st$Nnode
ntips<-numeric(1000)
for(i in 1:1000) {
st<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
ntips[i]<-length(st$tip.label)
}
hist(ntips)
st
i
st$tip.label
st<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
st
# What is the distribution of tree size under a pure-birth model?
ntips<-numeric(1000)
for(i in 1:1000) {
st<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
ntips[i]<-length(st$tip.label)
}
i
st
?sim.bd.age
# What is the distribution of tree size under a pure-birth model?
ntips<-numeric(1000)
for(i in 1:1000) {
st<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
# rarely, there will be only one tip, and the function will return "1"
if(st==1) ntips[i]<-1 else ntips[i]<-length(st$tip.label)
}
hist(ntips)
i
st
all.equal(st)
all.equal(st,1)
?all.equal
length(st)
ntips<-numeric(1000)
for(i in 1:1000) {
st<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
# rarely, there will be only one tip, and the function will return "1"
if(length(st)==1) ntips[i]<-1 else ntips[i]<-length(st$tip.label)
}
hist(ntips)
?qqplot
rgeom(1)
?rgeom
?sim.bd.age
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
plot(simTree1)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
plot(simTree1)
exp(0.4 * 10)
?treesim
?TreeSim
?sim.bd.taxa.age
sim.bd.taxa.age(n=55, numbsim=1000, lamdba=0.4, mu=0, age=10)
sim.bd.taxa.age(n=55, numbsim=1000, lambda=0.4, mu=0, age=10)
allTheTrees<-sim.bd.taxa.age(n=55, numbsim=1000, lambda=0.4, mu=0, age=10)
LTT.plot(allTheTrees)
?LTT.plot
LTT.plot(allTheTrees, list(rep(10, 1000)))
LTT.plot(c(list(allTheTrees), list(rep(10, 1000)))
)
for(i in 1:1000) {
ltt.plot(allTheTrees[[i]])
}
ltt.plot(allTheTrees[[1]], log="y")
?ltt.plot
ltt.plot(allTheTrees[[1]], log="y")
for(i in 2:1000) {
ltt.lines(allTheTrees[[i]])
}
allTheTrees<-sim.bd.taxa.age(n=55, numbsim=1000, lambda=0.4, mu=0, age=10, mrca=T)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0, mrca=T)[[1]]
2*exp(0.4 * 10)
allTheTrees<-sim.bd.taxa.age(n=109, numbsim=1000, lambda=0.4, mu=0, age=10, mrca=T)
ltt.plot(allTheTrees[[1]], log="y")
for(i in 2:1000) {
ltt.lines(allTheTrees[[i]])
}
?sim.bd.taxa.age
allTheTrees2<-sim.bd.taxa.age(n=109, numbsim=1000, lambda=0.8, mu=0.4, age=10, mrca=T)
ltt.plot(allTheTrees2[[1]], log="y")
for(i in 2:1000) {
ltt.lines(allTheTrees2[[i]])
}
allTheTrees2<-sim.bd.taxa.age(n=109, numbsim=1000, lambda=2.0, mu=1.6, age=10, mrca=T)
ltt.plot(allTheTrees2[[1]], log="y")
for(i in 2:1000) {
ltt.lines(allTheTrees2[[i]])
}
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=2.0, mu=1.6)[[1]]
par(mfcol=c(1,2))
plot(simTree1)
plot(simTree2)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=2.0, mu=1.6)[[1]]
par(mfcol=c(1,2))
plot(simTree1)
plot(simTree2)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=2.0, mu=1.6)[[1]]
par(mfcol=c(1,2))
plot(simTree1)
plot(simTree2)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=2.0, mu=1.6)[[1]]
par(mfcol=c(1,2))
plot(simTree1)
plot(simTree2)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.age(age=10, numbsim=1, lambda=2.0, mu=1.6)[[1]]
par(mfcol=c(1,2))
plot(simTree1)
plot(simTree2)
simTree1<-sim.bd.taxa.age(n=109,age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=2.0, mu=1.6)[[1]]
par(mfcol=c(1,2))
plot(simTree1)
plot(simTree2)
plot(simTree1, main="Pure Birth")
plot(simTree2, main="Birth-death")
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
?sim.bd.taxa.age
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0, frac=0.5)[[1]]
par(mfcol=c(1,2))
plot(simTree1, main="Fully sampled")
plot(simTree2, main="Partially sampled")
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0, frac=0.5)[[1]]
par(mfcol=c(1,2))
plot(simTree1, main="Fully sampled")
plot(simTree2, main="Partially sampled")
simTree2
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.taxa.age(n=54, age=10, numbsim=1, lambda=0.4, mu=0, frac=0.5)[[1]]
par(mfcol=c(1,2))
plot(simTree1, main="Fully sampled")
plot(simTree2, main="Partially sampled")
simTree1<-sim.bd.taxa.age(n=109, age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
simTree2<-sim.bd.taxa.age(n=50, age=10, numbsim=1, lambda=0.4, mu=0, frac=50/109)[[1]]
par(mfcol=c(1,2))
plot(simTree1, main="Fully sampled")
plot(simTree2, main="Partially sampled")
allTheTrees3<-sim.bd.taxa.age(n=50, numbsim=1000, lambda=0.4, mu=0, age=10, mrca=T, frac=50/109)
ltt.plot(allTheTrees3[[1]], log="y")
for(i in 2:1000) {
ltt.lines(allTheTrees3[[i]])
}
ltt.plot(allTheTrees3[[1]], log="y")
plot.new()
ltt.plot(allTheTrees3[[1]], log="y")
for(i in 2:1000) {
ltt.lines(allTheTrees3[[i]])
}
library(ape)#
library(geiger)#
library(nlme)#
library(phytools)
setwd("~/Documents/teaching/revellClass/2014bogota/PGLS")
anoleData<-read.csv("anolisDataAppended.csv", row.names=1)
anoleTree<-read.tree("anolis.phy")
plot(anoleTree)
name.check(anoleTree, anoleData)
plot(anoleData[,c("awesomeness", "hostility")])
host<-anoleData[,"hostility"]
awe<-anoleData[,"awesomeness"]
host
names(host)<-rownames(anoleData)
names(awe)<-rownames(anoleData)
hPic<-pic(host, anoleTree)
aPic<-pic(awe, anoleTree)
picModel<-lm(hPic~aPic-1)
summary(picModel)
plot(hPic~aPic)
abline(a=0, b=coef(picModel))
abline(picModel)
pglsModel<-gls(hostility~awesomeness, correlation=corBrownian(phy=anoleTree), data=anoleData, method="ML")
summary(pglsModel)
anova(pglsModel)
coef(pglsModel)
coef(picModel)
stdModel<-gls(hostility~awesomeness, data=anoleData, method="ML")
coef(stdModel)
plot(host~awe)
abline(stdModel,col="red")
abline(pglsModel, col="blue")
pglsModel2<-gls(hostility~ecomorph, correlation=corBrownian(phy=anoleTree), data=anoleData, method="ML")
summary(pglsModel2)
anova(pglsModel2)
pglsModel3<-gls(hostility~awesomeness*ecomorph, correlation=corBrownian(phy=anoleTree), data=anoleData, method="ML")#
anova(pglsModel3)
pglsModelOU<-gls(hostility~awesomeness, correlation=corMartins(1, phy=anoleTree), data=anoleData, method="ML")
anoleTree$edge.length
newAnoleTree$edge.length <- newAnoleTree$edge.length * 100
newAnoleTree<-anoleTree#
newAnoleTree$edge.length <- newAnoleTree$edge.length * 100
pglsModelOU<-gls(hostility~awesomeness, correlation=corMartins(1, phy=newAnoleTree), data=anoleData, method="ML")
summary(pglsModelOU)
pglsModelOU$aic
summary(pglsModel1)
summary(pglsModel)
pglsModelLambda<-gls(hostility~awesomeness, correlation=corPagel(1, phy=newAnoleTree, fixed=FALSE), data=anoleData, method="ML")
summary(pglsModelLambda)
?corBrownian
coef(pglsModelLambda)
predict(pglsModelLambda)
predictedValues<-predict(pglsModelLambda)
realPV<-exp(predictedValues)
plot(realPV~awesomeness)
plot(realPV~awe)
plot(pglsModelLambda)
