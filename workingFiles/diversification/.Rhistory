library(TreePar)
install.package("TreePar")
install.packages("TreePar")
library(diversitree)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
# first fit a Yule model
make.yule(simTree1)
library(ape)
library(TreeSim)
library(diversitree)
simTree1<-sim.bd.age(age=10, numbsim=1, lambda=0.4, mu=0)[[1]]
# first fit a Yule model
make.yule(simTree1)
yuleMLFit<-find.mle(yuleModel)
# first fit a Yule model
yuleModel<-make.yule(simTree1)
yuleMLFit<-find.mle(yuleModel)
yuleMLFit<-find.mle(yuleModel, 0.1)
yuleMLFit
bdModel<-make.bd(simTree1)
bdMLFit<-find.mle(bdModel, c(0.1, 0.05))
bdMLFit<-find.mle(bdModel, c(0.1, 0))
bdMLFit
bdMLFit<-find.mle(bdModel, c(0.1, 0.05), method="optim", lower=0)
bdMLFit
bdMLFit$lnLik - yuleMLFit$lnLik
LRStat<- 2*(bdMLFit$lnLik - yuleMLFit$lnLik)
LRStat
?pchisq
pVal<-pchisq(LRStat, 1, lower.tail=F)
pVal
LRStat<- 2*(bdMLFit$lnLik - pbMLFit$lnLik)
# first fit a Yule model
pbModel<-make.yule(simTree1)
pbMLFit<-find.mle(pbModel, 0.1)
# next fit a Birth-death model
bdModel<-make.bd(simTree1)
bdMLFit<-find.mle(bdModel, c(0.1, 0.05), method="optim", lower=0)
# likelihood ratio test
LRStat<- 2*(bdMLFit$lnLik - pbMLFit$lnLik)
pVal<-pchisq(LRStat, 1, lower.tail=F)
ntips<-length(simTree1$tip.label)
ntips
pbAIC<-calculateAICC(pbMLFit$lnLik, 1, ntips)
calculateAICC<-function(lik, k, n) {
aic <- 2*k - 2 * lik
aicc <- aic + (2 * k * (k+1))/(n - k - 1)
aicc
}
pbAIC<-calculateAICC(pbMLFit$lnLik, 1, ntips)
bdAIC<-calculateAICC(bdMLFit$lnLik, 2, ntips)
c(pbAIC, bdAIC)
pbMLFit$lnLik
bdMLFit$lnLik
pbAIC
bdAIC
calculateAICC(pbMLFit$lnLik, 1, ntips)
calculateAICC(bdMLFit$lnLik, 2, ntips)
calculateAICC<-function(lik, k, n) {
aic <- 2*k - 2 * lik
print(aic)
aicc <- aic + (2 * k * (k+1))/(n - k - 1)
aicc
}
pbAICC<-calculateAICC(pbMLFit$lnLik, 1, ntips)
bdAICC<-calculateAICC(bdMLFit$lnLik, 2, ntips)
pbAICC
bdAICC
c(pbAIC, bdAIC)
bdSamples <- mcmc(bdModel, bdMLFit$par, nsteps=10000, lower=c(0, 0), upper=c(Inf, Inf), w=c(0.1, 0.1), fail.value=-Inf, print.every=500)
bdSamples <- mcmc(bdModel, bdMLFit$par, nsteps=100000, lower=c(0, 0), upper=c(Inf, Inf), w=c(0.1, 0.1), fail.value=-Inf, print.every=10000)
profiles.plot(postSamples, col.line=c("red", "blue"), las=1, legend="topright")
postSamples<-bdSamples[c("lambda", "mu")]
profiles.plot(postSamples, col.line=c("red", "blue"), las=1, legend="topright")
postSamples$r<-with(bdSamples, lambda-mu)
postSamples$eps<-with(bdSamples, mu/lambda)
profiles.plot(postSamples[,c("r", "eps")], col.line=c("red", "blue"), las=1, legend="topright")
gammaStat(simTree1)
mccrTest(simTree1)
?gammaStat
library(laser)
anoleData<-read.csv("anolisDataAppended.csv", row.names=1)
anoleData<-read.csv("~/Documents/teaching/revellClass/2014bogota/continuousModels/anolisDataAppended.csv", row.names=1)
anoleTree<-read.tree("~/Documents/teaching/revellClass/2014bogota/continuousModels/anolis.phy")
ecomorph<-anoleData[,"ecomorph"]
names(ecomorph)<-rownames(anoleData)
ecomorph
table(ecomorph)
isTG<-ecomorph=="TG"
isTG
isTG<-as.numeric(ecomorph=="TG")
isTG
?diversitree
?mkModel
bisseModel<-male.bisse(anoleTree, isTG)
library(diversitree)
bisseModel<-male.bisse(anoleTree, isTG)
bisseModel<-make.bisse(anoleTree, isTG)
isTG
names(isTG)<-names(ecomorph)
bisseModel<-make.bisse(anoleTree, isTG)
p<-starting.point.bisse(anoleTree)
bisseMLFit<-find.mle(bisseModel, p)
bisseMLFit
cBisseModel<-constrain(bisseModel, lambda1~lambda0)
cBisseModel<-constrain(cBisseModel, mu1~mu0)
cbMLFit<-findMLE(cBisseModel, p)
cbMLFit<-find.mle(cBisseModel, p)
p
cbMLFit<-find.mle(cBisseModel, p[c(-1, -3)])
bisseMLFit$lik
bisseMLFit$lnLik
cbMLFit$lnLik
bisseMLFit$lnLik-cbMLFit$lnLik
LRStat<- 2*(bisseMLFit$lnLik-cbMLFit$lnLik)
pVal<-pchisq(LRStat, 1, lower.tail=F)
LRStat
pVal
phy<-tree.bisse(pars, max.t=30, x0=0)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(1)
phy<-tree.bisse(simPars, max.t=30, x0=0)
simBisseData<-tree.bisse(simPars, max.t=30, x0=0)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(1)
simBisseData<-tree.bisse(simPars, max.t=30, x0=0)
simBisseData
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(2)
simBisseData<-tree.bisse(simPars, max.t=30, x0=0)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(1)
simBisseData<-tree.bisse(simPars, max.t=15, x0=0)
simBisseData
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(2)
simBisseData<-tree.bisse(simPars, max.t=15, x0=0)
simBisseData
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=15, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(1)
simBisseData<-tree.bisse(simPars, max.t=10, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(2)
simBisseData<-tree.bisse(simPars, max.t=10, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.01, 0.01)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=10, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.03, 0.03)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=10, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.05, 0.05)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=10, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.05, 0.05)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=15, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.05, 0.05)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=12, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
simPars<-c(0.4, 0.2, 0.05, 0.05, 0.05, 0.05)
set.seed(3)
simBisseData<-tree.bisse(simPars, max.t=14, x0=0)
hist<-history.from.sim.discrete(simBisseData, 0:1)
plot(hist, simBisseData)
nbModel<-make.bisse(simBisseData, simBisseData$tip.state)
p<-starting.point.bisse(simBisseData)
fit<-find.mle(nbModel, p)
nbModelMLFit<-find.mle(nbModel, p)
rbind(real=simPars, estimated=round(coef(nbModelMLFit), 2))
bisseMLFit$lnLik
logLik(bisseMLFit)
LRStat<- 2*(logLik(bisseMLFit)-logLik(cbMLFit))
LRStat
cnbModel<-constrain(nbModel, lambda1~lambda0)
cnbModel<-constrain(cnbModel, mu1~mu0)
cnbModelMLFit<-find.mle(cnbModel)
cnbModelMLFit<-find.mle(cnbModel, p[c(-1, -3)])
LRStat<- 2*(nbModelMLFit$lnLik-cnbModelMLFit$lnLik)
pVal<-pchisq(LRStat, 1, lower.tail=F)
LRStat
pVal
prior<-make.prior.exponential(1/(2*(p[1]-p[3])))
p
prior<-make.prior.exponential(1/(2*0.4))
anova(nbModelMLFit, constrained=cnbModelMLFit)
anova(bdModelFit, pure.birth=pbModelFit)
anova(bdMLFit, pure.birth=pbMLFit)
LRStat
LRStat<- 2*(bdMLFit$lnLik - pbMLFit$lnLik)
LRStat
mcmcRun<-mcmc(nbModel, nbModelMLFit$par, nsteps=10000, prior=prior, w=0.1, print.every=100)
mcmcRun<-mcmc(nbModel, nbModelMLFit$par, nsteps=1000, prior=prior, w=0.1, print.every=100)
col<-c("blue", "red", "green", "grey")
profiles.plot(mcmcRun[,"lambda0", "lambda1", "mu0", "mu1"], col.line=col, las=1, legend="topright")
mcmcRun
head(mcmcRun)
profiles.plot(mcmcRun[,"lambda0", "lambda1", "mu0", "mu1"], col.line=col, las=1, legend="topright")
profiles.plot(mcmcRun[,c("lambda0", "lambda1", "mu0", "mu1")], col.line=col, las=1, legend="topright")
profiles.plot(mcmcRun[,c("lambda0", "lambda1")], col.line=col, las=1, legend="topright")
profiles.plot(mcmcRun[,c("mu0", "mu1")], col.line=col, las=1, legend="topright")
mcmcRun$lamdiff<-with(mcmcRun, lambda0-lambda1)
mcmcRun$mudiff<-with(mcmcRun, mu0-mu1)
profiles.plot(mcmcRun[,c("lamdiff", "mudiff")], col.line=col, las=1, legend="topright")
profiles.plot(mcmcRun[,"lamdiff"], col.line="red", las=1)
profiles.plot(mcmcRun[,"lamdiff"], col.line="red")
profiles.plot(mcmcRun[,c("lamdiff", "mudiff")], col.line=col, las=1, legend="topright")
sum(mcmcRun$lambda0 > mcmcRun$lambda1)
sum(mcmcRun$lambda0 > mcmcRun$lambda1)/1000
sum(mcmcRun$lambda0 > mcmcRun$lambda1)/length(mcmcRun$lambda1)
sum(mcmcRun$mu0 > mcmcRun$mu1)/length(mcmcRun$mu1)
sum(mcmcRun$mu0 > mcmcRun$mu1)/length(mcmcRun$mu1)
sum(mcmcRun$lambda0 > mcmcRun$lambda1)/length(mcmcRun$lambda1)
anova(bisseMLFit, constrained=cbMLFit)
LRStat<- 2*(bisseMLFit$lnLik-cbMLFit$lnLik)
pVal<-pchisq(LRStat, 1, lower.tail=F)
pVal
LRStat
bisseMLFit
anova(bisseMLFit, constrained=cbMLFit)
prior<-make.prior.exponential(1/(2*2))
mcmcRun<-mcmc(bisseModel, nbModelMLFit$par, nsteps=1000, prior=prior, w=0.1, print.every=100)
library(laser)
mccrTest(simTree1)
mccrTest(simTree1, 1000)
?mccrTest
mccrTest(cladeSize=length(simTree1$tip.label), NumberMissing=0, numberOfReps=1000)
mccrTest(cladeSize=length(simTree1$tip.label), NumberMissing=0, NumberOfReps=1000)
mccrTest(CladeSize=length(simTree1$tip.label), NumberMissing=0, NumberOfReps=1000)
gs<-gammaStat(simTree1)
mccrNull<-mccrTest(CladeSize=length(simTree1$tip.label), NumberMissing=0, NumberOfReps=1000, ObservedGamma=gs)
gs<-gammaStat(simTree1)
mccrResult<-mccrTest(CladeSize=length(simTree1$tip.label), NumberMissing=0, NumberOfReps=1000, ObservedGamma=gs)
mccrResult
# now let's try the anole tree. This tree is incomplete, so we have to account for that.
gsAnole<-gammaStat(anoleTree)
mccrResultAnole<-mccrTest(CladeSize=length(anoleTree$tip.label), NumberMissing=70, NumberOfReps=1000, ObservedGamma=gsAnole)
mccrResultAnole
?ddx
?fitdAICrc
anoleBTimes<-getBtimes(anoleTree)
anoleBTimes<-getBtimes(string=anoleTree)
```
data(agamids)
agamids
anoleBTimes<-getBtimes(string=write.tree(anoleTree))
anoleBTimes
?getBTimes
?getBtimes
ab<-branching.times(anoleTree)
ab
ab<-sort(branching.times(anoleTree))
ab
ab<-sort(branching.times(anoleTree), decreasing=T)
ab
?fitdAICrc
fitdAICrc(anoleBTimes)
fitdAICrc(anoleBTimes, modelset = c("pureBirth", "bd",
"DDX", "DDL", "yule2rate"), ints = 100)
